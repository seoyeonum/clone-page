<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.team1.mybatis.ISitDAO">

 	<!-- 시터 회원 등록 요청 목록 확인 -->
	<select id="listSitReg" resultType="com.team1.dto.SitDTO">
		SELECT *
		FROM (
		    SELECT S.*, ROWNUM RN
		    FROM (
		        SELECT SIT_BACKUP_ID, REG_DATE, SIT_REG_ID, NAME
		             , ROAD_ADDR, DETAILED_ADDR, ZIP_CODE, TEL, FILE_PATH
		        FROM ADMIN_SIT_REG_VIEW
		        WHERE 1=1
		        <if test="searchKey != null and searchValue != null and searchValue != ''">
		            <if test="searchKey == 'name'">
		                AND NAME LIKE '%' || #{searchValue} || '%'
		            </if>
		            <if test="searchKey == 'tel'">
		                AND TEL LIKE '%' || #{searchValue} || '%'
		            </if>
		        </if>
		        ORDER BY SIT_BACKUP_ID DESC
		    ) S
		)
		WHERE RN BETWEEN #{start} AND #{end}

	</select>
	
 	<!-- 관리자 메인페이지 노출 상위 5개 -->
	<select id="listSitRegRecent" resultType="com.team1.dto.SitDTO">
		SELECT *
		FROM (
		    SELECT S.*, ROWNUM RN
		    FROM (
		        SELECT SIT_BACKUP_ID, REG_DATE, SIT_REG_ID, NAME
		             , ROAD_ADDR, DETAILED_ADDR, ZIP_CODE, TEL, FILE_PATH
		        FROM ADMIN_SIT_REG_VIEW
		        WHERE 1=1
		        ORDER BY SIT_BACKUP_ID DESC
		    ) S
		)
		WHERE <![CDATA[ RN <= 5 ]]>

	</select>
		

 	<!-- // [관리자] 시터 회원 등록 요청 개수 -->
 	<select id="countSitReg" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
		FROM ADMIN_SIT_REG_VIEW
		WHERE 1=1
		<if test="searchKey != null and searchValue != null and searchValue != ''">
			<if test="searchKey == 'name'">
                AND NAME LIKE '%' || #{searchValue} || '%'
            </if>
            <if test="searchKey == 'tel'">
                AND TEL LIKE '%' || #{searchValue} || '%'
            </if>
		</if>
	</select>

	<!-- 시터 회원 등록을 요청한 시터의 백업 코드로 상세정보 조회 -->
	<select id="searchSitRegDetail" resultType="com.team1.dto.SitDTO">
		SELECT 
		    B.SIT_BACKUP_ID AS SIT_BACKUP_ID 
		  , B.REG_DATE AS REG_DATE 
		  , R.SIT_REG_ID AS SIT_REG_ID
		  , R.PW AS PW
		  , R.NAME AS NAME
		  , R.SSN_FIRST AS SSN_FIRST
		  , R.SSN_SECOND AS SSN_SECOND
		  , R.ROAD_ADDR AS ROAD_ADDR
		  , R.DETAILED_ADDR AS DETAILED_ADDR
		  , TO_CHAR(R.ZIP_CODE) AS ZIP_CODE
		  , R.TEL AS TEL
		  , R.FILE_PATH AS FILE_PATH
		FROM SIT_REG R
		JOIN SIT_BACKUP B ON R.SIT_BACKUP_ID = B.SIT_BACKUP_ID
		WHERE R.SIT_BACKUP_ID = #{sit_backup_id}	
	</select>
	
 	<!-- [관리자] 시터 회원 리스트 -->
 	<select id="list" resultType="com.team1.dto.SitDTO"> 
		SELECT *
		FROM
		(
		    <!-- SELECT S.*, ROWNUM RN -->
		    SELECT S.*
		    FROM
		    (
		        <!--
		        SELECT *
		        FROM V_ADMIN_SIT_ALL
		        WHERE 1=1
		        -->
		        SELECT ROW_NUMBER() OVER (ORDER BY SB.SIT_BACKUP_ID ASC) AS RN
		        	 , SR.NAME, SR.TEL, G.GRADE, SB.SIT_BACKUP_ID, SB.REG_DATE 
		        FROM SIT_REG SR JOIN SIT_BACKUP SB
		        ON SR.SIT_BACKUP_ID = SB.SIT_BACKUP_ID
		        	JOIN SIT_GRADE_VIEW G
		        	ON SR.SIT_BACKUP_ID = G.SIT_BACKUP_ID
		        WHERE NOT EXISTS ( SELECT 1 FROM SIT_WITHDRAWED W WHERE W.SIT_BACKUP_ID = SR.SIT_BACKUP_ID) 
		        <if test="searchKey != null and searchValue != null and searchValue != ''">
		            <if test="searchKey == 'name'">
		                AND NAME LIKE '%' || #{searchValue} || '%'
		            </if>
		            <if test="searchKey == 'tel'">
		                AND TEL LIKE '%' || #{searchValue} || '%'
		            </if>
		        </if>
		        ORDER BY SIT_BACKUP_ID DESC
		    ) S
		) 
		WHERE RN BETWEEN #{start} AND #{end}
		
 	</select>
 	
 	<!-- // [관리자] 전체 시터 회원 명수 확인 public int countSit(); -->
 	<select id="countSit" resultType="java.lang.Integer"> 
 		SELECT COUNT(*) AS COUNT
		<!--
		FROM V_ADMIN_SIT_ALL
        WHERE 1=1
        -->
		FROM SIT_REG SR JOIN SIT_BACKUP SB
        ON SR.SIT_BACKUP_ID = SB.SIT_BACKUP_ID
        	JOIN SIT_GRADE_VIEW G
        	ON SR.SIT_BACKUP_ID = G.SIT_BACKUP_ID
        WHERE NOT EXISTS ( SELECT 1 FROM SIT_WITHDRAWED W WHERE W.SIT_BACKUP_ID = SR.SIT_BACKUP_ID)
        <if test="searchKey != null and searchValue != null and searchValue != ''">
            <if test="searchKey == 'name'">
                AND NAME LIKE '%' || #{searchValue} || '%'
            </if>
            <if test="searchKey == 'tel'">
                AND TEL LIKE '%' || #{searchValue} || '%'
            </if>
        </if>
 	</select>
 	
	<!-- 백업 아이디 시터 상세정보 조회 -->
	<select id="adminSearchSitDetail" resultType="com.team1.dto.SitDTO"> 
	 	SELECT *
		FROM V_ADMIN_SIT_ALL
		WHERE SIT_BACKUP_ID = #{sit_backup_id}
	</select>
	

 	<insert id="sitBac" > <!-- // [관리자] 시터 회원 등록 요청 public int sitReg(SitDTO dto); -->
		INSERT INTO SIT_BACKUP(SIT_BACKUP_ID, REG_DATE, ID)
		VALUES(#{sit_backup_id}, #{reg_date}, #{id})
 	</insert>
 	
 	
 	<insert id="sitReg" > <!-- // [관리자] 시터 회원 등록 요청 public int sitReg(SitDTO dto); -->
 		INSERT INTO SIT_REG(SIT_REG_ID, SIT_BACKUP_ID, PW, NAME, SSN_FIRST, SSN_SECOND, ROAD_ADDR, DETAILED_ADDR, ZIP_CODE, TEL, FILE_PATH)
		VALUES(#{sit_reg_id}, #{sit_backup_id}, #{pw}, #{name}, #{ssn_first}, #{ssn_second}, #{road_addr}, #{detailed_addr}, #{zip_code}, #{tel}, #{file_path})	
 	</insert>
 	
 	<!-- [관리자] 시터 회원 승인 -->
 	<insert id="sitChk"> 
	 	INSERT INTO SIT_CHK(SIT_CHK_ID, SIT_BACKUP_ID, CHK_DATE)
		VALUES('SCHK' || LPAD(SEQ_SCHK.NEXTVAL, 4, '0'), #{sit_backup_id}, SYSDATE)
 	</insert>
 	
 	
 	<update id="modifySit"> <!-- // [시터] 시터 회원 정보 수정  public int modifySit(SitDTO sitter); -->
 		UPDATE SIT_REG 
		 RIGHT JOIN SIT_BACKUP ON (SIT_REG.SIT_BACKUP_ID = SIT_BACKUP.SIT_BACKUP_ID)
		   SET SIT_REG.PW = #{pw}
		     , SIT_REG.NAME = #{name}
		     , SIT_REG.ROAD_ADDR = #{road_addr}
		     , SIT_REG.DETAILED_ADDR = #{detailed_addr}
		     , SIT_REG.ZIP_CODE = #{zip_code}
		     , SIT_REG.TEL =  #{tel}
		WHERE SIT_BACKUP_ID = #{sit_backup_id}
 	</update>
 	
 	<select id="sitNameSearch" resultType="com.team1.dto.SitDTO"> <!-- // [관리자] 시터 회원 이름 검색 public SitDTO sitNameSearch(String name); -->
 		SELECT SIT_BACKUP_ID, REG_DATE, ID, PW, NAME
 		, SIT_CHK_ID, CHK_DATE, SSN_FIRST
 		, SSN_SECOND, ROAD_ADDR, DETAILED_ADDR
 		, ZIP_CODE, TEL, BANK_TYPE, ACCT_NUMBER
		FROM SIT_VIEW
		WHERE NAME LIKE '%#{name}%'
 	</select>
 	
 	<select id="sitLogin" resultType="java.lang.String"> 
 	<!-- // [시터] 로그인 public String sitLogin(String id, String pw); -->
<!--  		SELECT SREG.NAME
		FROM SIT_REG SREG, SIT_BACKUP SBAC
		WHERE SREG.SIT_BACKUP_ID = SBAC.SIT_BACKUP_ID
		AND SBAC.ID = #{id}
		AND SREG.PW = #{pw} -->
		SELECT 
		    R.SIT_REG_ID,
		    R.SIT_BACKUP_ID,
		    B.ID,
		    R.PW,
		    R.NAME,
		    R.SSN_FIRST,
		    R.SSN_SECOND,
		    R.ROAD_ADDR,
		    R.DETAILED_ADDR,
		    R.ZIP_CODE, 
		    R.TEL,
		    R.FILE_PATH
		FROM SIT_REG R
		JOIN SIT_BACKUP B 
		ON B.SIT_BACKUP_ID = R.SIT_BACKUP_ID
		JOIN SIT_CHK C
		ON B.SIT_BACKUP_ID = C.SIT_BACKUP_ID
		WHERE B.ID = #{id}
		AND R.PW = #{pw}
 	</select>
 	
 	
 	<select id="sitIdSearch" resultType="com.team1.dto.SitDTO"> <!-- // [시터] 백업 아이디로 자기 정보 찾기 public SitDTO sitIdSearch(String sit_backup_id); -->
	 	<!-- 
	 	SELECT SIT_REG_ID AS sit_reg_id
		, SIT_BACKUP_ID AS sit_backup_id
		, ID AS ID
		, REG_DATE AS REG_DATE
		, PW AS PW
		, NAME AS NAME
		, SSN_FIRST AS SSN_FIRST
		, SSN_SECOND AS SSN_SECOND
		, ROAD_ADDR AS ROAD_ADDR
		, DETAILED_ADDR AS DETAILED_ADDR
		, ZIP_CODE AS ZIP_CODE
		, TEL AS TEL
		, FILE_PATH AS FILE_PATH
		FROM V_ADMIN_SIT_ALL
		WHERE SIT_BACKUP_ID = #{sit_backup_id, jdbcType=VARCHAR}
		 -->
		SELECT SR.SIT_REG_ID AS sit_reg_id
		, SB.SIT_BACKUP_ID AS sit_backup_id
		, SB.ID AS ID
		, SB.REG_DATE AS REG_DATE
		, SR.PW AS PW
		, SR.NAME AS NAME
		, SR.SSN_FIRST AS SSN_FIRST
		, SR.SSN_SECOND AS SSN_SECOND
		, SR.ROAD_ADDR AS ROAD_ADDR
		, SR.DETAILED_ADDR AS DETAILED_ADDR
		, SR.ZIP_CODE AS ZIP_CODE
		, SR.TEL AS TEL
		, SR.FILE_PATH AS FILE_PATH
		FROM SIT_REG SR JOIN SIT_BACKUP SB
        ON SR.SIT_BACKUP_ID = SB.SIT_BACKUP_ID
        WHERE SB.SIT_BACKUP_ID = #{sit_backup_id, jdbcType=VARCHAR}
		
		
	</select>
	
	<select id="searchGrades" resultType="com.team1.dto.SitDTO"> <!-- // [시터] 자기 등급 찾기 public SitDTO searchGrades(String id); -->
		SELECT NAME, TEL, SIT_BACKUP_ID, WORKED_HOUR AS TOTALWORKTIME, GRADE, SIT_REG_ID, CHK_DATE
		FROM V_ADMIN_SIT_ALL
		WHERE SIT_BACKUP_ID = #{sit_backup_id}
	</select>
	
	<select id="searchNextTime" resultType="java.lang.Integer"> <!-- // [시터] 자기 등급 이름을 넣고 승급 시간 계산. public int searchNextTime(String gradeName); -->
		SELECT MIN_RANGE
		FROM GRADES
		WHERE GRADE_ID = (
		                    SELECT CASE LPAD(TO_CHAR(TO_NUMBER(GRADE_ID)+1), 3, '0')
                                    WHEN '006'
                                    THEN '001'
                                    ELSE LPAD(TO_CHAR(TO_NUMBER(GRADE_ID)+1), 3, '0')
                                    END 
		                    FROM GRADES
		                    WHERE NAME = #{grade}
		                 )
	</select>
	
	<select id="searchRating" resultType="java.lang.Integer"> <!-- // [시터] 백업 아이디로 자신의 평균 점수 찾기 public int searchRating(String id); -->
		SELECT NVL(AVG(GREV.RATING), 0) AS RATING
		FROM GEN_REVIEWS GREV, GEN_CONFIRMED GCON, GEN_REQ GREQ, GEN_REG GREG, SIT_BACKUP SBAC
		WHERE GREV.GEN_CONFIRMED_ID = GCON.GEN_CONFIRMED_ID
		AND GCON.GEN_REQ_ID = GREQ.GEN_REQ_ID
		AND GREQ.GEN_REG_ID = GREG.GEN_REG_ID
		AND GREG.SIT_BACKUP_ID = SBAC.SIT_BACKUP_ID
		AND SBAC.SIT_BACKUP_ID = #{sit_backup_id}
	</select>
	
	<select id="searchBupRating" resultType="java.lang.Integer"> <!-- // [시터 혹은 관리자] 백업 코드로 자신의 평균 점수 찾기 public int searchBupRating(String sit_backup_id); -->
		SELECT NVL(AVG(GREV.RATING), 0) AS TOTALRATING
		FROM GEN_REVIEWS GREV, GEN_CONFIRMED GCON, GEN_REQ GREQ, GEN_REG GREG, SIT_BACKUP SBAC
		WHERE GREV.GEN_CONFIRMED_ID = GCON.GEN_CONFIRMED_ID
		AND GCON.GEN_REQ_ID = GREQ.GEN_REQ_ID
		AND GREQ.GEN_REG_ID = GREG.GEN_REG_ID
		AND GREG.SIT_BACKUP_ID = SBAC.SIT_BACKUP_ID
		AND GREG.SIT_BACKUP_ID = #{sit_backup_id}
		GROUP BY GREG.SIT_BACKUP_ID
	</select>
	
	<select id="searchM3Rating" resultType="java.lang.Integer"> <!-- // [시터] 백업 아이디로 자신의 최근 3개월 평균 점수 찾기	public int searchM3Rating(String sit_backup_id); -->
	<![CDATA[
		SELECT NVL(ROUND(AVG(GREV.RATING), 1), 0) AS MONTH3RATING
		FROM GEN_REVIEWS GREV, GEN_CONFIRMED GCON, GEN_REQ GREQ, GEN_REG GREG, SIT_BACKUP SBAC
		WHERE GREV.GEN_CONFIRMED_ID = GCON.GEN_CONFIRMED_ID
		AND GCON.GEN_REQ_ID = GREQ.GEN_REQ_ID
		AND GREQ.GEN_REG_ID = GREG.GEN_REG_ID
		AND GREG.SIT_BACKUP_ID = SBAC.SIT_BACKUP_ID
		AND SBAC.SIT_BACKUP_ID = #{sit_backup_id}
		AND GREV.REVIEWED_DATE < ADD_MONTHS(SYSDATE, -3)
		]]>
	</select>
	
	<select id="genCareCount" resultType="java.lang.Integer">
	<!-- // [시터가 그동안 맡은 일반 돌봄 서비스 수] public int genCareCount(String sit_backup_id); -->
	<![CDATA[
		SELECT COUNT(*) AS COUNT
		FROM GEN_REG GREG, GEN_REQ GREQ, GEN_CONFIRMED GCON
		, CHILD_BACKUP CBAC, CHILD_REG CREG, PAR_BACKUP PBAC, PAR_REG PREG
		, GEN_PAR_CONFIRMED_CANCELED GPCC, GEN_SIT_CONFIRMED_CANCELED GSCC
		WHERE GREG.GEN_REG_ID = GREQ.GEN_REG_ID 
		AND GREQ.GEN_REQ_ID = GCON.GEN_REQ_ID
		AND GREQ.CHILD_BACKUP_ID = CBAC.CHILD_BACKUP_ID
		AND CBAC.CHILD_BACKUP_ID = CREG.CHILD_BACKUP_ID
		AND CBAC.PAR_BACKUP_ID = PBAC.PAR_BACKUP_ID
		AND PBAC.PAR_BACKUP_ID = PREG.PAR_BACKUP_ID
		AND GCON.GEN_CONFIRMED_ID = GPCC.GEN_CONFIRMED_ID(+)
		AND GCON.GEN_CONFIRMED_ID = GSCC.GEN_CONFIRMED_ID(+)
		AND GPCC.GEN_PAR_CONFIRMED_CANCELED_ID IS NULL
		AND GSCC.GEN_SIT_CONFIRMED_CANCELED_ID IS NULL
		AND GREQ.END_DATE < SYSDATE
		AND GREG.SIT_BACKUP_ID = #{sit_backup_id}
		ORDER BY GREQ.END_DATE DESC
		]]>
	</select>
	
	<select id="emgCareCount" resultType="java.lang.Integer">
	<!-- // [시터가 그동안 맡은 긴급 돌봄 서비스 수] public int emgCareCount(String sit_backup_id); -->
	<![CDATA[
		SELECT COUNT(*) AS COUNT
		FROM SIT_BACKUP SBAC, CHILD_BACKUP CBAC, CHILD_REG CREG
		, PAR_BACKUP PBAC, PAR_REG PREG, EMG_REQ EREQ
		, EMG_CONFIRMED ECON, EMG_PAY_REC EPAY, EMG_CANCELED ECAN
		WHERE CBAC.PAR_BACKUP_ID = PBAC.PAR_BACKUP_ID
		AND CBAC.CHILD_BACKUP_ID = CREG.CHILD_BACKUP_ID
		AND PBAC.PAR_BACKUP_ID = PREG.PAR_BACKUP_ID
		AND EREQ.CHILD_BACKUP_ID = CBAC.CHILD_BACKUP_ID
		AND ECON.EMG_REQ_ID = EREQ.EMG_REQ_ID
		AND SBAC.SIT_BACKUP_ID = ECON.SIT_BACKUP_ID
		AND EREQ.EMG_REQ_ID = EPAY.EMG_REQ_ID
		AND EPAY.EMG_PAY_REC_ID = ECAN.EMG_PAY_REC_ID(+)
		AND ECAN.EMG_PAY_REC_ID IS NULL
		AND EREQ.END_DATE < SYSDATE
		AND SBAC.SIT_BACKUP_ID = #{sit_backup_id}
		ORDER BY EREQ.END_DATE DESC
		]]>
	</select>
	
	<!-- ① 시터 백업 삽입 (addBackup) -->
	<insert id="addBackup" parameterType="com.team1.dto.SitDTO">
	<selectKey keyProperty="sit_backup_id" resultType="String" order="BEFORE">
		SELECT 'SBAC' || LPAD(SEQ_SBAC.NEXTVAL, 4, '0') 
		FROM DUAL
	</selectKey>
		INSERT INTO SIT_BACKUP (SIT_BACKUP_ID, ID, REG_DATE)
		VALUES (#{sit_backup_id}, #{id}, SYSDATE)
	</insert>
	
	<!-- ② 시터 백업 코드로 SIT_REG 확인 및 회원 등록 -->
	<insert id="add" parameterType="com.team1.dto.SitDTO">
	<selectKey keyProperty="sit_reg_id" resultType="String" order="BEFORE">
		SELECT 'SREG' || LPAD(SEQ_SREG.NEXTVAL, 4, '0') 
		FROM DUAL
	</selectKey>
		INSERT INTO SIT_REG (SIT_REG_ID, SIT_BACKUP_ID, PW, NAME, 
		SSN_FIRST, SSN_SECOND, ROAD_ADDR, DETAILED_ADDR, TEL, ZIP_CODE, FILE_PATH)
		VALUES(#{sit_reg_id}, #{sit_backup_id}, #{pw}, #{name}, 
		#{ssn_first}, #{ssn_second}, #{road_addr}, #{detailed_addr}, #{tel}, #{zip_code}, #{file_path})
	</insert>
	
	<!-- checkId → SitLogin.xml -->
	
	<!-- 시터 관리자 승인 거부 확인 -->
	<select id="checkSitterRejected" parameterType="String" resultType="int">
	    SELECT COUNT(*)
	    FROM SIT_REJECTED
	    WHERE SIT_BACKUP_ID = #{sit_backup_id}
	</select>
	
	<!-- 승인 여부 확인 -->
	<select id="checkSitterApproved" parameterType="String" resultType="int">
	    SELECT COUNT(*)
	    FROM SIT_CHK
	    WHERE SIT_BACKUP_ID = #{sit_backup_id}
	</select>
</mapper>
